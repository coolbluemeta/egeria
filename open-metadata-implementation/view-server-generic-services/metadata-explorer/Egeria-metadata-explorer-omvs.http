# Egeria-metadata-explorer-view-service
# The Metadata Explorer OMVS provides APIs for supporting the search, query and retrieval of open metadata.  It is an advanced API for users that understand the [Open Metadata Types](https://egeria-project.org/types/).

@baseURL=https://localhost:9443
@viewServer=view-server

# Optional request options not show on the example requests below:
# -------------------------------------------------------------------
# Note: This a generic service which means the URL marker of "metadata-explorer" can be replaced with the URL marker
# of any other active view service.
# The URL marker is derived from the name of the requested service - take the short two-word service name, convert to
# lower case and add a hyphen between the two words - so Automated Curation's OMVS's URL Marker is automated-curation.
#
# There are optional request parameters for lineage and duplicate processing requests.
#
# * forLineage (default=false) - set this request parameter to true if this request is to support a lineage query -
#                                it will include the mementos representing elements in the graph that are deleted.
# * forDuplicateProcessing (default=false) - set this request parameter to true if the query is supporting
#                                            deduplication processing and so it turns off the automatic
#                                            deduplicate processing
#

###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}

###
#==================================================
# Load Archives
#==================================================

###
# @name get the GUID for active-metadata-store
# Retrieve the metadata element using its unique identifier.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/guid-by-unique-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NameRequestBody",
  "name" : "active-metadata-store",
  "namePropertyName" : "name"
}

> {% client.global.set("activeMetadataStoreGUID", response.body.guid); %}

###
# @name addOpenMetadataArchiveFile
# Add a new open metadata archive to running OMAG Server's repository.
# An open metadata archive contains metadata types and instances.  This operation loads an open metadata archive
# that is stored in the namrd file.  It can be used with OMAG servers that are of type Open Metadata Store.
# https://egeria-project.org/concepts/open-metadata-archives/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/omag-servers/{{activeMetadataStoreGUID}}/instance/load/open-metadata-archives/file
Authorization: Bearer {{token}}
Content-Type: text/plain

content-packs/CocoComboArchive.omarchive

###
# @name addOpenMetadataArchiveFile
# Add a new open metadata archive to running OMAG Server's repository.
# An open metadata archive contains metadata types and instances.  This operation loads an open metadata archive
# that is stored in the namrd file.  It can be used with OMAG servers that are of type Open Metadata Store.
# https://egeria-project.org/concepts/open-metadata-archives/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/omag-servers/{{activeMetadataStoreGUID}}/instance/load/open-metadata-archives/file
Authorization: Bearer {{token}}
Content-Type: text/plain

content-packs/CloudInformationModel.omarchive


###

@elementGUID=e564900d-277f-425d-b008-885b1928eb2f

###
# @name getMetadataElementByGUID
# Retrieve the metadata element using its unique identifier.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/{{elementGUID}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "AnyTimeRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name getAnchoredElementsGraph
# Retrieve the metadata element using its unique identifier.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/{{elementGUID}}/with-anchored-elements
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "AnyTimeRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name getMetadataElementByUniqueName
# Retrieve the metadata element using its unique name (typically the *qualifiedName* attribute but other attributes can be used if they are unique - such as *pathName* for a file).
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/by-unique-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NameRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "name" : "Metadata Access Server:active-metadata-store",
  "namePropertyName" : "qualifiedName"
}


###
# @name getMetadataElementGUIDByUniqueName
# Retrieve the metadata element guid using its unique name (typically the qualified name as shown).
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/guid-by-unique-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NameRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "name" : "Metadata Access Server:active-metadata-store",
  "namePropertyName" : "qualifiedName"
}



###
# @name getMetadataElementGUIDByUniqueName (fails)
# Retrieve the metadata element using its unique name (typically the qualified name as shown).
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/guid-by-unique-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NameRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "name" : "Metadata Access Server",
  "namePropertyName" : "deployedImplementationType"
}



###
# @name getMetadataElementHistory
# Retrieve all the versions of an element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/{{elementGUID}}/history?startFrom=0&pageSize=10&oldestFirst=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "HistoryRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name findMetadataElementsWithString
# Retrieve the metadata elements that contain the requested string.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/by-search-string?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString" : "Egeria",
  "typeName" : "ValidValueDefinition",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}

###
# @name findMetadataElementsWithString
# Retrieve the metadata elements that contain the requested string in any attribute.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString" : "Egeria.*",
  "typeName" : "ValidValueDefinition",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}


###
# @name getAllRelatedMetadataElements
# Retrieve the metadata elements connected to the supplied element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/related-elements/{{elementGUID}}/any-type?startingAtEnd=0&startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ResultsRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}


###
# @name getAllRelatedMetadataElements
# Retrieve the metadata elements connected to the supplied element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/related-elements/{{elementGUID}}/any-type?startingAtEnd=0&startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ResultsRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "PROPERTY_ASCENDING",
  "sequencingProperty": "fileName"
}


###

@relationshipTypeName=add name here

###
# @name getRelatedMetadataElements
# Retrieve the metadata elements connected to the supplied element via a specific relationship type.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/related-elements/{{elementGUID}}/type/{{relationshipTypeName}}?startingAtEnd=0&startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ResultsRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}


###

@metadataElementAtEnd1GUID=add guid here
@metadataElementAtEnd2GUID=add guid here

###
# @name getAllMetadataElementRelationships
# Retrieve the relationships linking the supplied elements.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/{{metadataElementAtEnd1GUID}}/linked-by-any-type/to-elements/{{metadataElementAtEnd2GUID}}?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ResultsRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}


###
# @name getMetadataElementRelationships
# Retrieve the relationships linking the supplied elements via a specific type of relationship.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/{{metadataElementAtEnd1GUID}}/linked-by-type/{{relationshipTypeName}}/to-elements/{{metadataElementAtEnd2GUID}}?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ResultsRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}


###
# @name findMetadataElements
# Return a list of metadata elements that match the supplied criteria.  The results can be returned over many pages.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/by-search-specification?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FindRequestBody",
  "metadataElementTypeName": "add typeName here",
  "metadataElementSubtypeNames": [],
  "searchProperties": {
     "class" : "SearchProperties",
     "conditions": [ {
         "nestedConditions": {
               "class" : "SearchProperties",
               "conditions": [
               {
                   "property" : "add name of property here",
                   "operator": "EQ",
                   "value": {
                      "class" : "PrimitiveTypePropertyValue",
                      "typeName" : "string",
                      "primitiveValue" : "Add value here"
                   }
               }],
               "matchCriteria": "ALL"
         }
     }],
     "matchCriteria": "ANY"
  },
  "matchClassifications": {
     "class" : "SearchClassifications",
     "conditions": [{
         "name" : "add classification name here",
         "searchProperties": {
            "class" : "SearchProperties",
               "conditions": [
               {
                   "property" : "add name of property here",
                   "operator": "EQ",
                   "value": {
                      "class" : "PrimitiveTypePropertyValue",
                      "typeName" : "string",
                      "primitiveValue" : "Add value here"
                   }
               }],
               "matchCriteria": "ALL"
         }
     }],
     "matchCriteria": "ANY"
  },
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}



###
# @name findMetadataElements anchored to a specific element
# Return a list of metadata elements that match the supplied criteria.  The results can be returned over many pages.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/by-search-specification?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FindRequestBody",
  "matchClassifications": {
     "class" : "SearchClassifications",
     "conditions": [{
         "name" : "Anchors",
         "searchProperties": {
            "class" : "SearchProperties",
               "conditions": [
               {
                   "property" : "anchorGUID",
                   "operator": "EQ",
                   "value": {
                      "class" : "PrimitiveTypePropertyValue",
                      "typeName" : "string",
                      "primitiveValue" : "{{@activeMetadataStoreGUID}}"
                   }
               }],
               "matchCriteria": "ALL"
         }
     }],
     "matchCriteria": "ANY"
  }
}



###
# @name find Glossary elements containing "party"
# Return a list of metadata elements that match the supplied criteria.  The results can be returned over many pages.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/metadata-elements/by-search-specification?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FindRequestBody",
  "searchProperties": {
     "class" : "SearchProperties",
     "conditions": [ {
         "property" : "description",
         "operator": "LIKE",
         "value": {
            "class" : "PrimitiveTypePropertyValue",
            "typeName" : "string",
            "primitiveValue" : "party"
          }},
         {
            "property" : "displayName",
            "operator": "LIKE",
            "value": {
               "class" : "PrimitiveTypePropertyValue",
               "typeName" : "string",
              "primitiveValue" : "party"
            }
         },
       {
         "property" : "summary",
         "operator": "LIKE",
         "value": {
           "class" : "PrimitiveTypePropertyValue",
           "typeName" : "string",
           "primitiveValue" : "party"
         }
     }],
     "matchCriteria": "ANY"
  },
  "matchClassifications": {
     "class" : "SearchClassifications",
     "conditions": [{
         "name" : "Anchors",
         "searchProperties": {
            "class" : "SearchProperties",
               "conditions": [
               {
                   "property" : "anchorDomainName",
                   "operator": "EQ",
                   "value": {
                      "class" : "PrimitiveTypePropertyValue",
                      "typeName" : "string",
                      "primitiveValue" : "Glossary"
                   }
               }],
               "matchCriteria": "ALL"
         }
     }],
     "matchCriteria": "ANY"
  }
}



###
# @name findRelationshipsBetweenMetadataElements
# Return a list of relationships that match the requested conditions.  The results can be received as a series of pages.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/relationships/by-search-specification?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FindRelationshipRequestBody",
  "relationshipTypeName": "add typeName here",
  "searchProperties": {
     "class" : "SearchProperties",
     "conditions": [ {
         "nestedConditions": {
               "class" : "SearchProperties",
               "conditions": [
               {
                   "property" : "add name of property here",
                   "operator": "EQ",
                   "value": {
                      "class" : "PrimitiveTypePropertyValue",
                      "typeName" : "string",
                      "primitiveValue" : "Add value here"
                   }
               }],
               "matchCriteria": "ALL"
         }
     }],
     "matchCriteria": "ANY"
  },
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}

###

@relationshipGUID=6690ba52-34f5-4bd6-98b7-06585b35e043

###
# @name getRelationshipByGUID
# Retrieve the relationship using its unique identifier.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/relationships/by-guid/{{relationshipGUID}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "AnyTimeRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}"
}



###
# @name getRelationshipHistory
# Retrieve all the versions of a relationship.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/metadata-explorer/relationships/{{relationshipGUID}}/history?startFrom=0&pageSize=10&oldestFirst=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "HistoryRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}"
}


