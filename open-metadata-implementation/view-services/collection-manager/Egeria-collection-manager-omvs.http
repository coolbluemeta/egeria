# Egeria-collection-manager-view-service

@baseURL=https://localhost:9443
@viewServer=view-server

###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}

###
# =====================================================================================================================
# Retrieving Collections: https://egeria-project.org/concepts/collection
#

@parentGUID=32bd6761-959b-4d9c-98e9-ce919717b8bd

###
# @name getAttachedCollections
# Returns the list of collections that are linked off of the supplied element using the ResourceList relationship.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/metadata-elements/{{parentGUID}}/collections?startFrom=0&pageSize=0
Authorization: Bearer {{token}}


###
# @name getAttachedCollections (and filter on collectionType)
# Returns the list of collections that are linked off of the supplied element using the ResourceList relationship.
# The request body enables you to taylor the output.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/metadata-elements/{{parentGUID}}/collections?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName",
  "filter" : "Add collectionType value here"
}

###
# @name findCollections
# Returns the list of collections matching the search string.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/by-search-string?startFrom=0&pageSize=0&startsWith=false&endsWith=false&ignoreCase=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName",
  "filter" : "Data Product Development Journey"
}


###
# @name findCollections (restricted by classificationName)
# Returns the list of collections matching the search string.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/by-search-string?classificationName=DataSpec&startFrom=0&pageSize=0&startsWith=false&endsWith=false&ignoreCase=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName",
  "filter" : "Data Product Development Journey"
}


###
# @name getCollectionsByName
# Returns the list of collections with a particular name.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/by-name?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName",
  "filter" : "DataJourneyProject:Data Acquisition Journey:{{projectName}}:ActivityFolder:Potential Data Sources"
}


###
# @name getCollectionsByName (restricted by classificationName)
# Returns the list of collections with a particular name.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/by-name?classificationName=DataSpec&startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName",
  "filter" : "DataJourneyProject:Data Acquisition Journey:{{projectName}}:ActivityFolder:Potential Data Sources"
}

###
# @name getCollectionsByType
# Returns the list of collections with a particular collectionType.  This is an optional text field in the collection element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/by-collection-type?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName",
  "filter" : "Add collection type here"
}

###
# @name getCollectionsByType (restricted by classificationName)
# Returns the list of collections with a particular collectionType.  This is an optional text field in the collection element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/by-collection-type?classificationName=DataSpec&startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName",
  "filter" : ""
}

###

@collectionGUID=6b14500f-9571-4f99-8469-0e872371598d

###
# @name getCollection
# Return the properties of a specific collection.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}
Authorization: Bearer {{token}}


###
# @name getCollection (with time-based control)
# Return the properties of a specific collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "AnyTimeRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name getCollectionMembers
# Return a list of elements that are a member of a collection.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/members?startFrom=0&pageSize=0
Authorization: Bearer {{token}}

###
# @name getCollectionMembers
# Return a list of elements that are a member of a collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/members?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ResultsRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}


###
# @name getCollectionGraph
# Return a graph of elements that are the nested members of a collection along
# with elements immediately connected to the starting collection.  The result
# includes a mermaid graph of the returned elements.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/graph?startFrom=0&pageSize=0
Authorization: Bearer {{token}}

###
# @name getCollectionGraph
# Return a graph of elements that are the nested members of a collection along
# with elements immediately connected to the starting collection.  The result
# includes a mermaid graph of the returned elements.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/graph?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ResultsRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}


###
# =====================================================================================================================
# Create Collections: https://egeria-project.org/concepts/collection
# These requests use the following parameters:
#
# anchorGUID - the unique identifier of the element that should be the anchor for the new element. Set to null if no anchor,
# or if this collection is to be its own anchor.
#
# isOwnAnchor -this element should be classified as its own anchor or not.  The default is false.
#
# parentGUID - the optional unique identifier for an element that should be connected to the newly created element.
# If this property is specified, parentRelationshipTypeName must also be specified
#
# parentRelationshipTypeName - the name of the relationship, if any, that should be established between the new element and the parent element.
# Examples could be "ResourceList" or "DigitalServiceProduct".
#
# parentAtEnd1 -identifies which end any parent entity sits on the relationship.
#

@classificationName=WorkItemList

###
# @name createCollection (Simple Work Item List)
# Create a new generic collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections?classificationName={{classificationName}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "isOwnAnchor" : true,
  "properties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  }
}

###
# @name createCollection
# Create a new generic collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "properties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name createRootCollection
# Create a new collection with the RootCollection classification.  Used to identify the top of a collection hierarchy.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/root-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "properties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name createDataSpecCollection
# Create a new collection with the DataSpec classification.  Used to identify a collection of data structures and
# data fields used to define data requirements for a project or initiative.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/data-spec-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "properties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name createDataDictionaryCollection
# Create a new collection with the Data Dictionary classification.  Used to identify a collection of
# data fields that represent a data store of collection of common data types.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/data-dictionary-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "properties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name createFolderCollection
# Create a new collection with the Folder classification.  This is used to identify the organizing collections in a collection hierarchy.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/folder
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "properties": {
    "class" : "CollectionFolderProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type",
    "collectionOrder" : "OTHER",
    "orderByPropertyName" : "Add property name if 'collectionOrder' is OTHER"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name createContextEventCollection
# Create a new collection with the ContextEventCollection classification.  This is used to group context events together.
# For example, the collection may be a series of events that affect a set of resources.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/context-event-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "properties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name createNamespaceCollection
# Create a new collection with the Namespace classification.  This is used to group elements that belong to the same namespace.
# For example, the collection may be a series of processes that are recording OpenLineage under a single namespace.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/namespace-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "properties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name createEventSetCollection
# Create a new collection with the EventSet classification.  This is used to group event schemas together.
# For example, the collection may describe a set of events emitted by a specific system or to disseminate
# information about a certain situation.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/context-event-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "properties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name createNamingStandardRuleSetCollection
# Create a new collection with the NamingStandardRuleSet classification.  This is used to group naming standard rule
# governance definitions together.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/naming-standard-rule-set-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "properties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name createCollectionFromTemplate
# Create a new metadata element to represent a collection using an existing metadata element as a template.
# The template defines additional classifications and relationships that should be added to the new collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class": "TemplateRequestBody",
  "anchorGUID": "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor": false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID": "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName": "open metadata type name",
  "parentAtEnd1": true,
  "templateGUID": "template GUID",
  "replacementProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "propertyName" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveTypeCategory" : "OM_PRIMITIVE_TYPE_STRING",
        "primitiveValue" : "value of property"
      }
    }
  },
  "placeholderPropertyValues" : {
    "placeholderProperty1Name" : "property1Value",
    "placeholderProperty2Name" : "property2Value"
  }
}


###
# @name updateCollection
# Update the properties of a collection.  
# Use the correct properties object (CollectionProperties, DigitalProductProperties, AgreementProperties)
# That is appropriate for your element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/update?replaceAllProperties=false
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "properties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@digitalProductGUID=xxx

###
# @name createDigitalProduct (no lifecycle)
# Create a new collection that represents a digital product.
# Note: the three dates: introductionDate, nextVersionDate and withdrawDate must be valid dates if specified,
# otherwise you will get a 400 error response.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "isOwnAnchor" : true,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "xxx",
  "parentRelationshipTypeName" : "CollectionMembership",
  "parentAtEnd1": true,
  "properties": {
    "class" : "DigitalProductProperties",
    "qualifiedName": "DigitalProduct:Add product name here",
    "name" : "Product contents",
    "description" : "Add description of product and its expected usage here",
    "identifier" : "Add product identifier here",
    "productName" : "Add product name here",
    "productType" : "Periodic Delta",
    "maturity" : "Add valid value here",
    "serviceLife" : "Add the estimated lifetime of the product",
    "introductionDate" : "date",
    "nextVersionDate": "date",
    "withdrawDate": "date",
    "currentVersion": "V0.1",
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    }
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name createDigitalProduct (lifecycle)
# Create a new collection that represents a digital product.
# Note: the three dates: introductionDate, nextVersionDate and withdrawDate must be valid dates if specified,
# otherwise you will get a 400 error response.
# The valid values for initialStatus are: DRAFT, PREPARED, PROPOSED, APPROVED, REJECTED, APPROVED_CONCEPT,
# UNDER_DEVELOPMENT, DEVELOPMENT_COMPLETE, APPROVED_FOR_DEPLOYMENT, ACTIVE, DISABLED, DEPRECATED,
# OTHER.  If useing OTHER, set the userDefinedStatus with the statu value you want.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewDigitalProductRequestBody",
  "isOwnAnchor" : true,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "xxx",
  "parentRelationshipTypeName" : "CollectionMembership",
  "parentAtEnd1": true,
  "properties": {
    "class" : "DigitalProductProperties",
    "qualifiedName": "DigitalProduct:Add product name here",
    "userDefinedStatus" : "Optional value here - used when initial status is OTHER",
    "name" : "Product display name",
    "description" : "Add description of product and its expected usage here",
    "identifier" : "Add product identifier here",
    "productName" : "Add product name here",
    "productType" : "Periodic Delta",
    "maturity" : "Add valid value here",
    "serviceLife" : "Add the estimated lifetime of the product",
    "introductionDate" : "date",
    "nextVersionDate": "date",
    "withdrawDate": "date",
    "currentVersion": "V0.1",
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    }
  },
  "initialStatus" : "DRAFT",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name updateDigitalProduct
# Update the properties of the DigitalProduct collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{digitalProductGUID}}/update?replaceAllProperties=false
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "properties": {
    "class" : "DigitalProductProperties",
    "qualifiedName": "DigitalProduct:Add product name here",
    "name" : "Product contents",
    "description" : "Add description of product and its expected usage here",
    "userDefinedStatus" : "OBSOLETE",
    "identifier" : "Add product identifier here",
    "productName" : "Add product name here",
    "productType" : "Periodic Delta",
    "maturity" : "Add valid value here",
    "serviceLife" : "Add the estimated lifetime of the product",
    "introductionDate" : "date",
    "nextVersionDate": "date",
    "withdrawDate": "date",
    "currentVersion": "V0.1",
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    }
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name updateDigitalProductStatus
# Update the status of the DigitalProduct collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/digital-products/{{digitalProductGUID}}/update-status
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DigitalProductStatusRequestBody",
  "status": "APPROVED",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@consumerDigitalProductGUID=add guid here
@consumedDigitalProductGUID=add guid here

###
# @name linkDigitalProductDependency
# Link two dependent digital products.  The linked elements are of type 'DigitalProduct' . Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/digital-products/{{consumerDigitalProductGUID}}/product-dependencies/{{consumedDigitalProductGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "RelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "InformationSupplyChainLinkProperties",
    "label": "add label here",
    "description": "add description here",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachDigitalProductDependency
# Unlink dependent digital products. Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/digital-products/{{consumerDigitalProductGUID}}/product-dependencies/{{consumedDigitalProductGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "MetadataSourceRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###

@digitalProductManagerGUID=Add guid here

###
# @name linkProductManager
# Attach a product manager to a digital product. Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/digital-products/{{digitalProductGUID}}/product-managers/{{digitalProductManagerGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "RelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name detachProductManager
# Detach a product manager from a digital product. Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/digital-products/{{digitalProductGUID}}/product-managers/{{digitalProductManagerGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "MetadataSourceRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@agreementGUID=xxx

###
# @name createAgreement (no lifecycle)
# Create a new collection that represents an agreement.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "isOwnAnchor" : true,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "xxx",
  "parentRelationshipTypeName" : "CollectionMembership",
  "parentAtEnd1": true,
  "properties": {
    "class" : "AgreementProperties",
    "qualifiedName": "Agreement:Add agreement name here",
    "name" : "display name",
    "description" : "Add description of the agreement here",
    "identifier" : "Add agreement identifier here",
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    }
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name createAgreement (lifecycle)
# Create a new collection that represents an agreement.
# Note: the three dates: introductionDate, nextVersionDate and withdrawDate must be valid dates if specified,
# otherwise you will get a 400 error response.
# The valid values for initialStatus are: DRAFT, PREPARED, PROPOSED, APPROVED, REJECTED
# ACTIVE, DEPRECATED, OTHER.  If useing OTHER, set the userDefinedStatus with the statu value you want.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewAgreementRequestBody",
  "isOwnAnchor" : true,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "xxx",
  "parentRelationshipTypeName" : "CollectionMembership",
  "parentAtEnd1": true,
  "properties": {
    "class" : "AgreementProperties",
    "qualifiedName": "Agreement:Add agreement name here",
    "name" : "display name",
    "description" : "Add description of the agreement here",
    "userDefinedStatus" : "NEW",
    "identifier" : "Add agreement identifier here",
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    }
  },
  "initialStatus" : "OTHER",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name createDataSharingAgreementCollection 
# Create a new collection with the DataSharingAgreement classification.  The collection is typically an agreement
# which may use the NewElementRequestBody, or the NewAgreementRequestBody if the initial status needs to be set.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/namespace-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewAgreementRequestBody",
  "isOwnAnchor" : true,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "xxx",
  "parentRelationshipTypeName" : "CollectionMembership",
  "parentAtEnd1": true,
  "properties": {
    "class" : "AgreementProperties",
    "qualifiedName": "Agreement:Add agreement name here",
    "name" : "display name",
    "description" : "Add description of the agreement here",
    "userDefinedStatus" : "NEW",
    "identifier" : "Add agreement identifier here",
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    }
  },
  "initialStatus" : "OTHER",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name updateAgreement
# Update the properties of the Agreement collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{agreementGUID}}/update?replaceAllProperties=false
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "properties": {
    "class" : "AgreementProperties",
    "qualifiedName": "Agreement:Add agreement name here",
    "name" : "display name",
    "description" : "Add description of the agreement here",
    "userDefinedStatus" : "OBSOLETE",
    "identifier" : "Add agreement identifier here",
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    }
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name updateAgreementStatus
# Update the status of the Agreement collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/agreements/{{agreementGUID}}/update-status
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "AgreementStatusStatusRequestBody",
  "status": "APPROVED",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@actorGUID=add guid here

###
# @name linkAgreementActor
# Attach an actor to an agreement.  The actor element may be an actor profile (person, team or IT profile);
# actor role (person role, team role or IT profile role); or user identity. Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/agreements/{{agreementGUID}}/agreement-actors/{{actorGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "RelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "AgreementActorProperties",
    "actorName": "add name of actor used in agreement text",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachAgreementActor
# Detach an actor from an agreement. Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/agreements/{{agreementGUID}}/agreement-actors/{{actorGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "MetadataSourceRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@agreementItemGUID=add guid here

###
# @name linkAgreementItem
# Attach an agreement to an element referenced in its definition.
# The agreement item  element is of type 'Referenceable' to allow the
# agreement to refer to many things. Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/agreements/{{agreementGUID}}/agreement-items/{{agreementItemGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "RelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "AgreementItemProperties",
    "agreementItemId": "add label here",
    "agreementStart": "{{$isoTimestamp}}",
    "agreementEnd": "{{$isoTimestamp}}",
    "restrictions": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    },
    "obligations" : {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    },
    "usageMeasurements" : {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachAgreementItem
# Detach an agreement from an element involved in its definition. Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/agreements/{{agreementGUID}}/agreement-items/{{agreementItemGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "MetadataSourceRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@externalReferenceGUID=add guid here

###
# @name linkContract
# Attach an agreement to an external reference element that describes the location of the contract documents. Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/agreements/{{agreementGUID}}/contract-links/{{externalReferenceGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "RelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "ContractLinkProperties",
    "contractId": "add id here",
    "contractLiaison": "add identifier of actor here",
    "contractLiaisonTypeName": "add type of actor here",
    "contractLiaisonPropertyName": "add property of actor's identifier here",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachContract
# Detach an agreement from an external reference describing the location of the contract documents. Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/agreements/{{agreementGUID}}/contract-links/{{externalReferenceGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "MetadataSourceRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# Digital Subscriptions

@digitalSubscriberGUID=add guid here
@digitalSubscriptionGUID=add guid here

###
# @name createDigitalSubscription (no lifecycle)
# Create a new collection that represents a type of agreement called a DigitalSubscription.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "isOwnAnchor" : true,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "xxx",
  "parentRelationshipTypeName" : "CollectionMembership",
  "parentAtEnd1": true,
  "properties": {
    "class" : "DigitalSubscriptionProperties",
    "qualifiedName": "DigitalSubscription:Add subscription name here",
    "name" : "display name",
    "description" : "Add description of the subscription here",
    "userDefinedStatus" : "OBSOLETE",
    "identifier" : "Add subscription identifier here",
    "supportLevel" : "Add the level of support agreed/requested",
    "serviceLevels" : {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    },
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
     }
   },
   "externalSourceGUID": "add guid here",
   "externalSourceName": "add qualified name here",
   "effectiveTime" : "{{$isoTimestamp}}",
   "forLineage" : false,
   "forDuplicateProcessing" : false
}


###
# @name createAgreement (lifecycle)
# Create a new collection that represents a digital subscription.
# The DigitalSubscription is a type of Agreement and so can have lifecycle states.
# Note: the three dates: introductionDate, nextVersionDate and withdrawDate must be valid dates if specified,
# otherwise you will get a 400 error response.
# The valid values for initialStatus are: DRAFT, PREPARED, PROPOSED, APPROVED, REJECTED
# ACTIVE, DEPRECATED, OTHER.  If useing OTHER, set the userDefinedStatus with the statu value you want.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewAgreementRequestBody",
  "isOwnAnchor" : true,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "xxx",
  "parentRelationshipTypeName" : "CollectionMembership",
  "parentAtEnd1": true,
  "properties": {
    "class" : "DigitalSubscriptionProperties",
    "qualifiedName": "DigitalSubscription:Add subscription name here",
    "name" : "display name",
    "description" : "Add description of the subscription here",
    "userDefinedStatus" : "OBSOLETE",
    "identifier" : "Add subscription identifier here",
    "supportLevel" : "Add the level of support agreed/requested",
    "serviceLevels" : {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    },
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
     }
   },
   "initialStatus" : "OTHER",
   "externalSourceGUID": "add guid here",
   "externalSourceName": "add qualified name here",
   "effectiveTime" : "{{$isoTimestamp}}",
   "forLineage" : false,
   "forDuplicateProcessing" : false
}

###
# @name updateDigitalSubscription
# Update the properties of the digital subscription collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{digitalSubscriptionGUID}}/update?replaceAllProperties=false
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "properties": {
    "class" : "DigitalSubscriptionProperties",
    "qualifiedName": "DigitalSubscription:Add subscription name here",
    "name" : "display name",
    "description" : "Add description of the subscription here",
    "userDefinedStatus" : "OBSOLETE",
    "identifier" : "Add subscription identifier here",
    "supportLevel" : "Add the level of support agreed/requested",
    "serviceLevels" : {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    },
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    }
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name updateDigitalSubscriptionStatus
# Update the status of the digital subscription collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/agreements/{{digitalSubscriptionGUID}}/update-status
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "AgreementStatusStatusRequestBody",
  "status": "APPROVED",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name linkSubscriber
# Attach a subscriber to a subscription.  The subscriber is of type 'Referenceable' to allow digital
# products, team or business capabilities to be the subscriber.
# The subscription is an element of type DigitalSubscription.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/subscribers/{{digitalSubscriberGUID}}/subscriptions/{{digitalSubscriptionGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "RelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "DigitalSubscriberProperties",
    "subscriberId": "add id here",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachSubscriber
# Detach a subscriber from a subscription.  Request body is optional.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/subscribers/{{digitalSubscriberGUID}}/subscriptions/{{digitalSubscriptionGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "MetadataSourceRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name attachCollection
# Connect an existing collection to an element using the ResourceList relationship (0019).
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/metadata-elements/{{parentGUID}}/collections/{{collectionGUID}}/attach?makeAnchor=false
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "RelationshipRequestBody",
  "properties": {
    "class": "ResourceListProperties",
    "resourceUse": "Add valid value here",
    "resourceUseDescription": "Add description here",
    "watchResource": false,
    "resourceUseProperties": {
      "property1Name": "property1Value",
      "property2Name": "property2Value"
    }
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name detachCollection
# Detach an existing collection from an element.  If the collection is anchored to the element, it is deleted.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/metadata-elements/{{parentGUID}}/collections/{{collectionGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "MetadataSourceRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name deleteCollection
# Delete a collection.  It is detached from all parent elements.  If members are anchored to the collection
# then they are also deleted; otherwise they are just detached. The option cascadedDelete (default value=false)
# controls how nested collections are handled.  If it is false then the delete fails if there are nested collections.
# If true then nested collections are deleted, irrespective of their anchor.  However, any elements anchored to these
# nested collections are deleted as well. (Use this option wisely :)
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "MetadataSourceRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@elementGUID="guid that is to be a member of the collection"

###
# @name addToCollection
# Add an element to a collection.  The request body is optional
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/members/{{elementGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "RelationshipRequestBody",
  "properties" : {
    "class": "CollectionMembershipProperties",
    "membershipRationale": "xxx",
    "createdBy": "user id here",
    "expression": "expression that described why the element is a part of this collection",
    "confidence": 100,
    "membershipStatus": "PROPOSED",
    "userDefinedStatus": "Add valid value here",
    "steward": "identifier of steward that validated this member",
    "stewardTypeName": "type name of element identifying the steward",
    "stewardPropertyName": "property name if the steward's identifier",
    "source": "source of the member",
    "notes": "Add notes here"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name updateCollectionMembership
# Update an element's membership to a collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/members/{{elementGUID}}/update?replaceAllProperties=false
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "RelationshipRequestBody",
  "properties" : {
    "class": "CollectionMembershipProperties",
    "membershipRationale": "xxx",
    "createdBy": "user id here",
    "expression": "expression that described why the element is a part of this collection",
    "confidence": 100,
    "membershipStatus": "PROPOSED",
    "userDefinedStatus": "Add valid value here",
    "steward": "identifier of steward that validated this member",
    "stewardTypeName": "type name of element identifying the steward",
    "stewardPropertyName": "property name if the steward's identifier",
    "source": "source of the member",
    "notes": "Add notes here"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name removeFromCollection
# Remove an element from a collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/members/{{elementGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "MetadataSourceRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}