# Egeria-collection-manager-view-service

@baseURL=https://localhost:9443
@viewServer=view-server

###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}

###
# =====================================================================================================================
# Retrieving Collections: https://egeria-project.org/concepts/collection
#

@parentGUID=32bd6761-959b-4d9c-98e9-ce919717b8bd

###
# @name getAttachedCollections
# Returns the list of collections that are linked off of the supplied element using the ResourceList relationship.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/metadata-elements/{{parentGUID}}/collections?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
}

###
# @name getClassifiedCollections
# Returns the list of collections with a particular classification.  These classifications
# are typically "RootCollection", "Folder" or "DigitalProduct".
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/by-classifications?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : ""
}

###
# @name findCollections
# Returns the list of collections matching the search string.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/by-search-string?startFrom=0&pageSize=0&startsWith=false&endsWith=false&ignoreCase=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : "Data Product Development Journey"
}

###
# @name getCollectionsByName
# Returns the list of collections with a particular name.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/by-name?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : "DataJourneyProject:Data Acquisition Journey:{{projectName}}:ActivityFolder:Potential Data Sources"
}

###
# @name getCollectionsByType
# Returns the list of collections with a particular collectionType.  This is an optional text field in the collection element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/by-collection-type?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : ""
}

###

@collectionGUID=6b14500f-9571-4f99-8469-0e872371598d

###
# @name getCollection
# Return the properties of a specific collection.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}
Authorization: Bearer {{token}}


###
# @name getCollectionMembers
# Return a list of elements that are a member of a collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/members?startFrom=0&pageSize=0
Authorization: Bearer {{token}}

###
# @name getCollectionMembers
# Return a list of elements that are a member of a collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/members?startFrom=0&pageSize=0
Authorization: Bearer {{token}}

{
  "class" : "ResultsRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}


###
# @name getCollectionGraph
# Return a graph of elements that are the nested members of a collection along
# with elements immediately connected to the starting collection.  The result
# includes a mermaid graph of the returned elements.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/graph?startFrom=0&pageSize=0
Authorization: Bearer {{token}}

###
# @name getCollectionGraph
# Return a graph of elements that are the nested members of a collection along
# with elements immediately connected to the starting collection.  The result
# includes a mermaid graph of the returned elements.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/graph?startFrom=0&pageSize=0
Authorization: Bearer {{token}}

{
  "class" : "ResultsRequestBody",
  "effectiveTime" : "{{$isoTimestamp}}",
  "limitResultsByStatus" : ["ACTIVE"],
  "asOfTime" : "{{$isoTimestamp}}",
  "sequencingOrder": "CREATION_DATE_RECENT",
  "sequencingProperty": ""
}


###
# =====================================================================================================================
# Create Collections: https://egeria-project.org/concepts/collection
# These requests use the following parameters:
#
# anchorGUID - the unique identifier of the element that should be the anchor for the new element. Set to null if no anchor,
# or if this collection is to be its own anchor.
#
# isOwnAnchor -this element should be classified as its own anchor or not.  The default is false.
#
# parentGUID - the optional unique identifier for an element that should be connected to the newly created element.
# If this property is specified, parentRelationshipTypeName must also be specified
#
# parentRelationshipTypeName - the name of the relationship, if any, that should be established between the new element and the parent element.
# Examples could be "ResourceList" or "DigitalServiceProduct".
#
# parentAtEnd1 -identifies which end any parent entity sits on the relationship.
#

@classificationName=WorkItemList

###
# @name createCollection (Simple Work Item List)
# Create a new generic collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections?classificationName={{classificationName}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "isOwnAnchor" : true,
  "collectionProperties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  }
}

###
# @name createCollection
# Create a new generic collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "collectionProperties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  }
}

###
# @name createRootCollection
# Create a new collection with the RootCollection classification.  Used to identify the top of a collection hierarchy.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/root-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "collectionProperties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  }
}


###
# @name createDataSpecCollection
# Create a new collection with the DataSpec classification.  Used to identify a collection of data structures and
# data fields used to define data requirements for a project or initiative.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/data-spec-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "collectionProperties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  }
}

###
# @name createDataDictionaryCollection
# Create a new collection with the Data Dictionary classification.  Used to identify a collection of
# data fields that represent a data store of collection of common data types.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/data-dictionary-collection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "collectionProperties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type"
  }
}

###
# @name createFolderCollection
# Create a new collection with the Folder classification.  This is used to identify the organizing collections in a collection hierarchy.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/folder
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewCollectionRequestBody",
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "collectionProperties": {
    "class" : "CollectionProperties",
    "qualifiedName": "Must provide a unique name here",
    "name" : "Add display name here",
    "description" : "Add description of the collection here",
    "collectionType": "Add appropriate valid value for type",
    "collectionOrder" : "OTHER",
    "orderByPropertyName" : "Add property name if 'collectionOrder' is OTHER"
  }
}

###
# @name createCollectionFromTemplate
# Create a new metadata element to represent a collection using an existing metadata element as a template.
# The template defines additional classifications and relationships that should be added to the new collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class": "TemplateRequestBody",
  "anchorGUID": "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor": false,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID": "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName": "open metadata type name",
  "parentAtEnd1": true,
  "templateGUID": "template GUID",
  "replacementProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "propertyName" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveTypeCategory" : "OM_PRIMITIVE_TYPE_STRING",
        "primitiveValue" : "value of property"
      }
    }
  },
  "placeholderPropertyValues" : {
    "placeholderProperty1Name" : "property1Value",
    "placeholderProperty2Name" : "property2Value"
  }
}

###

@digitalProductGUID=xxx

###
# @name createDigitalProduct
# Create a new collection that represents a digital product.
# Note: the three dates: introductionDate, nextVersionDate and withdrawDate must be valid dates if specified,
# otherwise you will get a 400 error response.
# The valid values for productStatus are: DRAFT, PREPARED, PROPOSED, APPROVED, REJECTED, APPROVED_CONCEPT,
# UNDER_DEVELOPMENT, DEVELOPMENT_COMPLETE, APPROVED_FOR_DEPLOYMENT, ACTIVE, DISABLED, DEPRECATED,
# OTHER.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/digital-products
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewDigitalProductRequestBody",
  "isOwnAnchor" : true,
  "anchorScopeGUID" : "optional GUID of search scope",
  "parentGUID" : "xxx",
  "parentRelationshipTypeName" : "CollectionMembership",
  "parentAtEnd1": true,
  "collectionProperties": {
    "class" : "CollectionProperties",
    "qualifiedName": "DigitalProduct:Add product name here",
    "name" : "=Product contents",
    "description" : "Add description of the contents of the product",
    "collectionType": "Digital Product"
  },
  "digitalProductProperties" : {
    "class" : "DigitalProductProperties",
    "productStatus" : "DRAFT",
    "productName" : "Add product name here",
    "productType" : "Periodic Delta",
    "description" : "Add description of product and its expected usage here",
    "maturity" : "Add valid value here",
    "serviceLife" : "Add the estimated lifetime of the product",
    "introductionDate" : "date",
    "nextVersionDate": "date",
    "withdrawDate": "date",
    "currentVersion": "V0.1",
    "additionalProperties": {
      "property1Name" : "property1Value",
      "property2Name" : "property2Value"
    }
  }
}

###
# @name updateCollection
# Update the properties of a collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/update?replaceAllProperties=false
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "CollectionProperties",
  "qualifiedName": "Must provide a unique name here if replaceAllProperties=true",
  "name" : "Add display name here",
  "description" : "Add description of the collection here",
  "collectionType": "Add appropriate valid value for type"
}

###
# @name updateDigitalProduct
# Update the properties of the DigitalProduct classification attached to a collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/digital-products/{{digitalProductGUID}}/update?replaceAllProperties=false
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DigitalProductProperties",
  "productStatus" : "ACTIVE",
  "productName" : "Add product name here",
  "productType" : "Periodic Delta",
  "description" : "Add description of product and its expected usage here",
  "introductionDate" : "date",
  "maturity" : "Add valid value here",
  "serviceLife" : "Add the estimated lifetime of the product",
  "currentVersion": "V1.0",
  "nextVersionDate": "date",
  "withdrawDate": "date",
  "additionalProperties": {
    "property1Name" : "property1Value",
    "property2Name" : "property2Value"
  }
}

###
# @name attachCollection
# Connect an existing collection to an element using the ResourceList relationship (0019).
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/metadata-elements/{{parentGUID}}/collections/{{collectionGUID}}/attach?makeAnchor=false
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ResourceListProperties",
  "resourceUse" : "Add valid value here",
  "resourceUseDescription" : "Add description here",
  "watchResource" : false,
  "resourceUseProperties": {
    "property1Name" : "property1Value",
    "property2Name" : "property2Value"
  }
}

###
# @name detachCollection
# Detach an existing collection from an element.  If the collection is anchored to the element, it is deleted.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/metadata-elements/{{parentGUID}}/collections/{{collectionGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NullRequestBody"
}

###
# @name deleteCollection
# Delete a collection.  It is detached from all parent elements.  If members are anchored to the collection
# then they are also deleted; otherwise they are just detached. The option cascadedDelete (default value=false)
# controls how nested collections are handled.  If it is false then the delete fails if there are nested collections.
# If true then nested collections are deleted, irrespective of their anchor.  However, any elements anchored to these
# nested collections are deleted as well. (Use this option wisely :)
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NullRequestBody"
}

###

@elementGUID="guid that is to be a member of the collection"

###
# @name addToCollection
# Add an element to a collection.  The request body is optional
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/members/{{elementGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "CollectionMembershipProperties",
  "membershipRationale": "xxx",
  "createdBy": "user id here",
  "expression": "expression that described why the element is a part of this collection",
  "confidence": 100,
  "membershipStatus": "PROPOSED",
  "userDefinedStatus": "Add valid value here",
  "steward": "identifier of steward that validated this member",
  "stewardTypeName": "type name of element identifying the steward",
  "stewardPropertyName": "property name if the steward's identifier",
  "source": "source of the member",
  "notes": "Add notes here"
}

###
# @name updateCollectionMembership
# Update an element's membership to a collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/members/{{elementGUID}}/update?replaceAllProperties=false
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "CollectionMembershipProperties",
  "membershipRationale": "xxx",
  "createdBy": "user id here",
  "expression": "expression that described why the element is a part of this collection",
  "confidence": 100,
  "membershipStatus": "PROPOSED",
  "userDefinedStatus": "Add valid value here",
  "steward": "identifier of steward that validated this member",
  "stewardTypeName": "type name of element identifying the steward",
  "stewardPropertyName": "property name if the steward's identifier",
  "source": "source of the member",
  "notes": "Add notes here"
}

###
# @name removeFromCollection
# Remove an element from a collection.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/collection-manager/collections/{{collectionGUID}}/members/{{elementGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NullRequestBody"
}